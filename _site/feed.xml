<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-05-21T00:37:42+09:00</updated><id>http://localhost:4000/</id><title type="html">Younlab</title><subtitle>Stylish, Two-Column Jekyll Theme</subtitle><entry><title type="html">제어문(for)</title><link href="http://localhost:4000/%EC%A0%9C%EC%96%B4%EB%AC%B8(for)/" rel="alternate" type="text/html" title="제어문(for)" /><published>2018-05-20T00:00:00+09:00</published><updated>2018-05-20T00:00:00+09:00</updated><id>http://localhost:4000/%EC%A0%9C%EC%96%B4%EB%AC%B8(for)</id><content type="html" xml:base="http://localhost:4000/%EC%A0%9C%EC%96%B4%EB%AC%B8(for)/">&lt;p&gt;#for 문(조건에 따른 순회문)&lt;/p&gt;

&lt;p&gt;시퀀스형 데이터 (&lt;strong&gt;list, tuple, dictionary&lt;/strong&gt;)를 순회하고자 할때 사용된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for 'for문에서 사용할 변수명' in '시퀀스형 데이터':
    항목에 적용할 조건
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예제&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;list_set = ['red', 'green', 'Yellow', 'blue']

for color in list_set:
    print(color)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;순서대로 코드를 번역하자면&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;list_set 이라는 변수에 list를 만들어 red, green, yellow, blue 라는 문자열 자료를 할당한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;반복문을 선언한다. 컬러라는 변수를 지정, list_set 데이터를 순회하여 데이터를 프린트(출력)하라&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;#딕셔너리를 출력할때&lt;/p&gt;

&lt;p&gt;딕셔너리를 출력할때 파이썬의 내장함수를 사용하지않으면 default값으로 키값을 출력되게끔 되어있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;color = {
  'red':'빨강',
  'blue':'파랑',
  'green':'초록',
}

for item in color:
  print(item)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 코드의 결과값은&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;red
blue
green
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 결과값과 같은 기능을 하는 내장함수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;.keys()&lt;/code&gt; 다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for item in color.keys():
  print(item)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 역활을 하는 내장함수는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;.keys() 딕셔너리의 키값만 출력한다.&lt;/li&gt;
  &lt;li&gt;.values() 딕셔너리의 해당 키값이 가지고있는 데이터만을 출력한다.&lt;/li&gt;
  &lt;li&gt;.items() 딕셔너리의 키값과 데이터값 모두를 출력한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.items()&lt;/code&gt; 를 사용 할 경우 결과값을 tuple 데이터로 출력한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for item in color.items():
     print(item)

('red', '빨강')
('blue', '파랑')
('green', '초록')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;tuple 데이터로 출력하지 않으려고 할 때에는 어떻게 하면 될까?&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for item in color.items():
    print('{}: {}'.format(item[0], item[1]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;포멧팅과 인덱스를 사용하여 tuple 데이터를 언패킹 하여 출력한다.
해석해보자면&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;’{}: {}’.format(item[0], item[1])&lt;/li&gt;
  &lt;li&gt;딕셔너리의 첫번째 값(키값)을 맨앞의 중괄호에 할당하라.&lt;/li&gt;
  &lt;li&gt;두번째 이하 동문&lt;/li&gt;
  &lt;li&gt;인덱스의 값은 0부터 시작한다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="python" /><summary type="html">if, elif, else</summary></entry><entry><title type="html">제어문(if, elif, else)</title><link href="http://localhost:4000/%EC%A0%9C%EC%96%B4%EB%AC%B8(if,-elif,-else1)/" rel="alternate" type="text/html" title="제어문(if, elif, else)" /><published>2018-05-20T00:00:00+09:00</published><updated>2018-05-20T00:00:00+09:00</updated><id>http://localhost:4000/%EC%A0%9C%EC%96%B4%EB%AC%B8(if,%20elif,%20else1)</id><content type="html" xml:base="http://localhost:4000/%EC%A0%9C%EC%96%B4%EB%AC%B8(if,-elif,-else1)/">&lt;p&gt;#if 문의 구성&lt;/p&gt;

&lt;p&gt;if는 참과 거짓을 구분하는 함수다. &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; &lt;strong&gt;만약&lt;/strong&gt; 내가 &lt;code class=&quot;highlighter-rouge&quot;&gt;조건문&lt;/code&gt; &lt;strong&gt;슈퍼에서 사탕을 살려고 할때, 사탕의 가격기 200원이다.&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;조건이 참일 경우&lt;/code&gt; 200원이 있을경우 구매한다. 돈을 두고왔다. &lt;code class=&quot;highlighter-rouge&quot;&gt;조건이 거짓일 경우&lt;/code&gt; &lt;strong&gt;다시 집으로 가지러 간다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if 조건1:
      조건1이 참일 경우
else:
      조건1이 거짓일 경우
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; 의 경우 if문의 조건이 맞지 않을경우의 일을 작성해주는 문단이다.&lt;/p&gt;

&lt;p&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;elif&lt;/code&gt; 의 경우는 아래와 같이 사용한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if 조건1:
      조건1이 참일 경우
elif  조건2:
      조건1은 거짓이나, 조건2가 참일 경우
else:
      어떠한 조건에도 해당하지 않을경우, 즉 전부 거짓일 경우
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;elif&lt;/code&gt; 의 경우 1의 조건이 맞지 않을경우에 2의 조건을 제시하는 경우에 사용된다.&lt;/p&gt;

&lt;!-- ``` --&gt;</content><author><name></name></author><category term="python" /><summary type="html">if, elif, else</summary></entry><entry><title type="html">시퀀스타입(tuple, list)</title><link href="http://localhost:4000/%EC%8B%9C%ED%80%80%EC%8A%A4-%ED%83%80%EC%9E%85/" rel="alternate" type="text/html" title="시퀀스타입(tuple, list)" /><published>2018-05-18T00:00:00+09:00</published><updated>2018-05-18T00:00:00+09:00</updated><id>http://localhost:4000/%EC%8B%9C%ED%80%80%EC%8A%A4%20%ED%83%80%EC%9E%85</id><content type="html" xml:base="http://localhost:4000/%EC%8B%9C%ED%80%80%EC%8A%A4-%ED%83%80%EC%9E%85/">&lt;p&gt;#시퀀스타입(tuple, list)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;list&lt;/strong&gt;는 [ ]’대괄호’, &lt;strong&gt;tuple&lt;/strong&gt;은 ( )’소괄호’로 표현되며 &lt;strong&gt;list&lt;/strong&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;.append()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.expend()&lt;/code&gt;라는 내장함수로 값을 변경할 수 있지만 &lt;strong&gt;tuple&lt;/strong&gt;는 한번 값이 정해지면 변경할수 없다.&lt;/p&gt;

&lt;p&gt;#list를 만들수 있는 방법을 모아보자!&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; list_set = [1, 2, 3, 4, 5, 6, 7, 8, 9]

&amp;gt;&amp;gt;&amp;gt; list_set = list(1, 2, 3, 4, 5, 6, 7, 8, 9)

&amp;gt;&amp;gt;&amp;gt; list_set = '1, 2, 3, 4, 5, 6, 7, 8, 9'.split(',')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;list()&lt;/code&gt;는 python의 리스트를 만들어주는 내장함수이다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;split()&lt;/code&gt; ‘,’ 의 기준으로 문자열 형태의 리스트로 만들어준다.&lt;/p&gt;

&lt;p&gt;list를 중복하여 사용할 수도 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; list_set = [ 0, 11, 12, 14,
            [1, 2, 3, 4, 5, 6],
            [7, 8, 9]
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;리스트의 내장함수
&lt;strong&gt;list.index( value )&lt;/strong&gt; : 값을 이용하여 위치를 찾는 기능
&lt;strong&gt;list.extend( [value1, value2] )&lt;/strong&gt; : 리스트 뒤에 값을 추가 (‘+’연산자 보다 성능이 좋음)
&lt;strong&gt;list.insert( index, value )&lt;/strong&gt; : 원하는 위치에 값을 추가
&lt;strong&gt;list.sort( )&lt;/strong&gt; : 값을 순서대로 정렬
&lt;strong&gt;list.reverse( )&lt;/strong&gt; : 값을 역순으로 정렬&lt;/p&gt;

&lt;p&gt;#tuple를 만들수 있는 방법을 모아보자!&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; tuple_set = (1, 2, 3, 4, 5, 6, 7, 8, 9)
&amp;gt;&amp;gt;&amp;gt; tuple_set = tuple(1, 2, 3, 4, 5, 6, 7, 8, 9)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;튜플은 값이 결정되면 변경할수 없다. 리스트와 마찬가지로 생성, 추가는 자유롭지만, 삭제 수정이 불가능하다.&lt;/p&gt;

&lt;p&gt;#두 자료형 모두 인덱싱과 슬라이싱이 가능하다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; list_set = [1, 2, 3, 4, 5]
&amp;gt;&amp;gt;&amp;gt; tuple_set = (1, 2, 3, 4, 5)
&amp;gt;&amp;gt;&amp;gt; list_set[2] + tuple_set[3]
7

&amp;gt;&amp;gt;&amp;gt;list_set[0:3]
[1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;index&lt;/strong&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;변수명+[자리번째 숫자]&lt;/code&gt; 형식으로 사용하며  0부터 시작한다. 해당하는 숫자 번째 자리에 있는 요소를 가져온다.
&lt;strong&gt;slice&lt;/strong&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;변수명+[자리번째 숫자:마지막번째 숫자:건너뛸 숫자]&lt;/code&gt; 형식으로 사용하며 만일 [0:10:2] 라고 입력했다면 1~10번째 자리를 출력하나 두번씩 건너뜀으로 아래와 같이 출력할것이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; list_set =[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&amp;gt;&amp;gt;&amp;gt; list_set[0:10:2]
[1, 3, 5, 7, 9]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="python" /><summary type="html">list 와 tuple를 되는대로 만들어보자!</summary></entry></feed>